const { createWriteStream } = require('fs');
const { MessageEmbed, MessageSelectMenu, MessageActionRow, MessageButton } = require('discord.js');

module.exports = async (client, int, interaction, message) => {

    if (!int.isCommand()) {

    const req = int.customId.split('_')[0];

    client.emit('ticketsLogs', req, int.guild, int.member.user);

    switch (req) {
        case 'createTicket': {
            const selectMenu = new MessageSelectMenu();

            selectMenu.setCustomId('newTicket');
            selectMenu.setPlaceholder('–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É');
            selectMenu.addOptions([
                {
                    emoji: '‚òÉÔ∏è',
                    label: '–°—É–¥',
                    description: '–ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—å –Ω–∞ —è–∫–æ–≥–æ—Å—å —É—á–∞—Å–Ω–∏–∫–∞',
                    value: 'newTicket_–°—É–¥'
                },
                {
                    emoji: '‚ùÑÔ∏è',
                    label: '–î–æ–ø–æ–º–æ–≥–∞',
                    description: '–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞',
                    value: 'newTicket_–ü–æ–º–æ—â—å'
                },
                {
                    emoji: 'üèÇ',
                    label: '–Ü–Ω—à–µ',
                    description: '–ù–µ–æ–∑–Ω–∞—á–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞/–Ω–µ–º–∞—î –≤ –ø–µ—Ä–µ–ª—ñ–∫—É',
                    value: 'newTicket'
                },
            ]);

            const row = new MessageActionRow().addComponents(selectMenu);

            return int.reply({ content: '–Ø–∫–∞ –ø—Ä–∏—á–∏–Ω–∞ —Ä–µ–ø–æ—Ä—Ç—É?', components: [row], ephemeral: true });
        }

        case 'newTicket': {
            const reason = int.values[0].split('_')[1];

            const channel = int.guild.channels.cache.find(x => x.name === `üéÑÔ∏±–∫–≤–∏—Ç–æ–∫-${int.member.id}`); 
            if (!channel) {
                await int.guild.channels.create(`üéÑÔ∏±–∫–≤–∏—Ç–æ–∫-${int.member.id}`, {
                    type: 'GUILD_TEXT',
                    topic: `–ö–≤–∏—Ç–æ–∫ –≤—ñ–¥–∫—Ä–∏—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ${int.member.user.username}${reason ? ` (${reason})` : ''} ${new Date(Date.now()).toLocaleString()}`,
                    permissionOverwrites: [
                        {
                            id: int.guild.id,
                            deny: ['VIEW_CHANNEL', 'SEND_MESSAGES']
                        },
                        {
                            id: int.member.id,
                            allow: ['VIEW_CHANNEL', 'SEND_MESSAGES']
                        },
                        {
                            id: client.user.id,
                            allow: ['VIEW_CHANNEL', 'SEND_MESSAGES']
                        },
                        {
                            id: '880863408029859911',
                            allow: ['VIEW_CHANNEL', 'SEND_MESSAGES']
                        },
                        {
                            id: '902136621170819072',
                            allow: ['VIEW_CHANNEL', 'SEND_MESSAGES']
                        }
                    ]
                });

                const channel = int.guild.channels.cache.find(x => x.name === `üéÑÔ∏±–∫–≤–∏—Ç–æ–∫-${int.member.id}`);

                const ticketEmbed = new MessageEmbed();

                ticketEmbed.setColor('DARK_VIVID_PINK');
                ticketEmbed.setAuthor(`–ö–≤–∏—Ç–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${int.member.user.username}, –ø—Ä–∏—á–∏–Ω–∞:${reason ? ` ${reason}` : ' –Ω–µ–º–∞—î'} ‚òÉÔ∏è`);
                ticketEmbed.setDescription('–©–æ–± –∑–∞–∫—Ä–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ');

                const closeButton = new MessageButton();

                closeButton.setStyle('DANGER');
                closeButton.setLabel('–ó–∞–∫—Ä–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫');
                closeButton.setCustomId(`closeTicket_${int.member.id}`);

                const row = new MessageActionRow().addComponents(closeButton);
                
                await channel.send({ embeds: [ticketEmbed], components: [row] });

                if (reason === `–°—É–¥`)

                var questions = [
                    `–ß–∞—Å –ø–æ—Ä—É—à–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ **MM.DD.YY, HH:MM**\n||(–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 12.31.60, 12:45)||`,
                    `–¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Ä–≥–∏`,
                    `–í–∫–∞–∂—ñ—Ç—å –ø–æ—Ä—É—à–Ω–∏–∫–∞`,
                    `–í–∫–∞–∂—ñ—Ç—å —Å–≤—ñ–¥–∫—ñ–≤ (—Å–µ–±–µ —Ç–∞–∫–æ–∂)`,
                    `–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (—Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ (—Ç—ñ–ª—å–∫–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º), —Ç–µ–∫—Å—Ç, –¥–æ–∫–∞–∑–∏, —Ç–¥)`
                ];

                const embedHello = new MessageEmbed()
                .setColor(`DARK_VIVID_PINK`)
                .setDescription(`–í–∏—Ä—ñ—à–∏–ª–∏ –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –≤ —Å—É–¥? –ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∏–∂—á–µ\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ \`-\` —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ–ª–µ –ø—É—Å—Ç–∏–º`)

                await channel.send({ embeds: [embedHello] })

                let counter = 0;

                const embedCollector = new MessageEmbed()
                .setColor(`DARK_VIVID_PINK`)
                .setDescription(questions[counter++]);

                const embedDone = new MessageEmbed()
                .setColor(`DARK_VIVID_PINK`)
                .setDescription(`–î—è–∫—É—é—î–º–æ –∑–∞ —Ä–µ–ø–æ—Ä—Ç! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—É–ª–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ —Å—É–¥–¥—è–º, –æ—á—ñ–∫—É–π—Ç–µ —ó—ó –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è! –ù–∞—Å—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∏—â–µ –∞–±–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫\n–í–µ—Å–µ–ª–æ–≥–æ —Ä—ñ–∑–¥–≤–∞! üéÑ`)

                const filter = m => !m.author.bot

                const collector = channel.createMessageCollector({
                    max: questions.length,
                    time: 1000 * 300, // 300 —Å–µ–∫—É–Ω–¥, 5 —Ö–≤
                    errors: [`time`],
                    filter
                });

                let answers = [`aboba`]

                await channel.send({ embeds: [embedCollector] })
                collector.on(`collect`, async m => {
                    if (counter < questions.length) {
                        embedCollector.setDescription(questions[counter++])
                        answers.push(m.content)
                        await m.channel.send({ embeds: [embedCollector] })
                    }
                    else if (counter === questions.length) {
                        answers.push(m.content)
                        await m.channel.send({ embeds: [embedDone], components: [row] })
                    }
                });

                collector.on(`end`, async (collected, reason, m) => {
                    console.log(`–ó—ñ–±—Ä–∞–Ω–æ ${collected.size} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å`)

                    const embedReport = new MessageEmbed()
                    .setColor(`DARK_VIVID_PINK`)
                    .setAuthor(`–ù–æ–≤–∏–π —Ä–µ–ø–æ—Ä—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${int.member.user.username}`)
                    .setDescription(`
                    –ß–∞—Å –ø–æ—Ä—É—à–µ–Ω–Ω—è: **${answers[1] === (`-` || `undefined`) ? `**–Ω–µ –∑–∞–¥–∞–Ω–æ**` : `${answers[1]}`}**
                    –ü—Ä–∏—á–∏–Ω–∞: **${answers[2] === (`-` || `undefined`) ? `**–Ω–µ –∑–∞–¥–∞–Ω–æ**` : `${answers[2]}`}**
                    –ü–æ—Ä—É—à–Ω–∏–∫–∏: **${answers[3] === (`-` || `undefined`) ? `**–Ω–µ –∑–∞–¥–∞–Ω–æ**` : `${answers[3]}`}**
                    –°–≤—ñ–¥–∫–∏: **${answers[4] === (`-` || `undefined`) ? `**–Ω–µ –∑–∞–¥–∞–Ω–æ**` : `${answers[4]}`}**
                    –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: **${answers[5] === (`-` || `undefined`) ? `**–Ω–µ –∑–∞–¥–∞–Ω–æ**` : `${answers[5]}`}**
                    `)

                    const embedTimesUp = new MessageEmbed()
                    .setColor('RED')
                    .setDescription(`–ß–∞—Å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è! (5 —Ö–≤)`)
        
                    if (reason === 'time') await channel.send({ embeds: [embedTimesUp] });
                    else {
                        client.channels.cache.get('911004433960292372').send({ embeds: [embedReport] });
                        await client.channels.cache.get('911004433960292372').send(`<@&880863408029859911>`);
                    }
                });

                if (reason === `–ü–æ–º–æ—â—å`)
                    await channel.send(`<@&901807255496839168>, <@&902136621170819072>`)

                return int.update({ content: `–ö–≤–∏—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ! <#${channel.id}> ‚úÖ`, components: [], ephemeral: true });
            } else {
                return int.update({ content: `–°–ø–µ—Ä—à—É –∑–∞–∫—Ä–∏–π—Ç–µ —Å—Ç–∞—Ä–∏–π –∫–≤–∏—Ç–æ–∫! <#${channel.id}> ‚ùå`, components: [], ephemeral: true });
            }
        }

        case 'closeTicket': {
            const channel = int.guild.channels.cache.get(int.channelId);
            await channel.edit({
                permissionOverwrites: [
                    {
                        id: int.guild.id,
                        deny: ['VIEW_CHANNEL', 'SEND_MESSAGES']
                    },
                    {
                        id: int.customId.split('_')[1],
                        deny: ['VIEW_CHANNEL', 'SEND_MESSAGES']
                    },
                    {
                        id: client.user.id,
                        allow: ['VIEW_CHANNEL', 'SEND_MESSAGES']
                    },
                    {
                        id: '880863408029859911',
                        allow: ['VIEW_CHANNEL', 'SEND_MESSAGES']
                    },
                    {
                        id: '902136621170819072',
                        allow: ['VIEW_CHANNEL', 'SEND_MESSAGES']
                    }
                ]
            });

            const ticketEmbed = new MessageEmbed();

            ticketEmbed.setColor('DARK_VIVID_PINK');
            ticketEmbed.setAuthor(`${int.member.user.username} –∑–∞–∫—Ä–∏–≤ –∫–≤–∏—Ç–æ–∫`);
            ticketEmbed.setDescription('–©–æ–± –Ω–∞–∑–∞–≤–∂–¥–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∫–≤–∏—Ç–æ–∫, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ "–í–∏–¥–∞–ª–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫"');

            const reopenButton = new MessageButton();

            reopenButton.setStyle('SUCCESS');
            reopenButton.setLabel('–í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫ –∑–∞–Ω–æ–≤–æ');
            reopenButton.setCustomId(`reopenTicket_${int.customId.split('_')[1]}`);

            const saveButton = new MessageButton();

            saveButton.setStyle('SUCCESS');
            saveButton.setLabel('–ó–±–µ—Ä–µ–≥—Ç–∏ –∫–≤–∏—Ç–æ–∫');
            saveButton.setCustomId(`saveTicket_${int.customId.split('_')[1]}`);

            const deleteButton = new MessageButton();

            deleteButton.setStyle('DANGER');
            deleteButton.setLabel('–í–∏–¥–∞–ª–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫');
            deleteButton.setCustomId('deleteTicket');

            const row = new MessageActionRow().addComponents(reopenButton, saveButton, deleteButton);

            return int.reply({ embeds: [ticketEmbed], components: [row] });
        }

        case 'reopenTicket': {
            const channel = int.guild.channels.cache.get(int.channelId);
            await channel.edit({
                permissionOverwrites: [
                    {
                        id: int.guild.id,
                        deny: ['VIEW_CHANNEL', 'SEND_MESSAGES']
                    },
                    {
                        id: int.customId.split('_')[1],
                        allow: ['VIEW_CHANNEL', 'SEND_MESSAGES']
                    },
                    {
                        id: client.user.id,
                        allow: ['VIEW_CHANNEL', 'SEND_MESSAGES']
                    },
                    {
                        id: '880863408029859911',
                        allow: ['VIEW_CHANNEL', 'SEND_MESSAGES']
                    },
                    {
                        id: '902136621170819072',
                        allow: ['VIEW_CHANNEL', 'SEND_MESSAGES']
                    }
                ]
            });

            const ticketEmbed = new MessageEmbed();

            ticketEmbed.setColor('DARK_VIVID_PINK');
            ticketEmbed.setAuthor(`–ö–≤–∏—Ç–æ–∫ –±—É–≤ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π –∑–∞–Ω–æ–≤–æ! ‚úÖ`);
            ticketEmbed.setDescription('–©–æ–± –∑–∞–∫—Ä–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ');

            const closeButton = new MessageButton();

            closeButton.setStyle('DANGER');
            closeButton.setLabel('–ó–∞–∫—Ä–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫');
            closeButton.setCustomId(`closeTicket_${int.customId.split('_')[1]}`);

            const row = new MessageActionRow().addComponents(closeButton);

            return int.reply({ embeds: [ticketEmbed], components: [row] });

        }

        case 'deleteTicket': {
            const channel = int.guild.channels.cache.get(int.channelId);

            return channel.delete();
        }

        case 'saveTicket': {
            const channel = int.guild.channels.cache.get(int.channelId);

            await channel.messages.fetch().then(async msg => {
                let messages = msg.filter(msg => msg.author.bot !== true).map(m => {
                    const date = new Date(m.createdTimestamp).toLocaleString();
                    const user = `${m.author.tag}${m.author.id === int.customId.split('_')[1] ? ' (ticket creator)' : ''}`;

                    return `${date} - ${user} : ${m.attachments.size > 0 ? m.attachments.first().proxyURL : m.content}`;
                }).reverse().join('\n');

                if (messages.length < 1) messages = '–ö–≤–∏—Ç–æ–∫ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –Ω—ñ—è–∫–∏—Ö –ø–æ–≤—ñ–¥–æ–ª–º–µ–Ω—å. –î–∏–≤–Ω–æ...';

                const ticketID = Date.now();

                const stream = await createWriteStream(`./data/${ticketID}.txt`);

                stream.once('open', () => {
                    stream.write(`–ö–≤–∏—Ç–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${int.customId.split('_')[1]} (–∫–∞–Ω–∞–ª #${channel.name})\n\n`);
                    stream.write(`${messages}\n\nLogs ${new Date(ticketID).toLocaleString()}`);

                    stream.end();
                });

                stream.on('finish', () => int.reply({ files: [`./data/${ticketID}.txt`] }));
                });
            }
        }
    }   
};
