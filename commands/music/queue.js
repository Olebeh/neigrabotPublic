const { MessageEmbed, GuildMember } = require('discord.js');

module.exports = {
    name: 'queue',
    description: '–ü–æ–∫–∞–∑—É—î —á–µ—Ä–≥—É',
    options: [
      {
        name: '—Å—Ç–æ—Ä—ñ–Ω–∫–∞',
        type: 4,
        description: '–ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏',
        required: false,
      },
    ],

    async execute (interaction, player, client) {

        const queue = player.getQueue(interaction.guild.id);

        const embedVoiceChannel = new MessageEmbed()
        .setColor(`RED`)
        .setDescription(`–í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏—Å—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—ñ!`)

        if (!(interaction.member instanceof GuildMember) || !interaction.member.voice.channel) return interaction.editReply({ embeds: [embedVoiceChannel] });

        const embedNothing = new MessageEmbed()
        .setColor('RED')
        .setDescription(`–ó–∞—Ä–∞–∑ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥—Ç–≤–æ—Ä—é—î—Ç—å—Å—è!`)

        if (!queue) return interaction.editReply({ embeds: [embedNothing] });

        const embedEmptyAfter = new MessageEmbed()
        .setColor('RED')
        .setDescription(`–ü–æ–∫–∏ —â–æ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—è –ø—ñ—Å–Ω—è –≤ —á–µ—Ä–∑—ñ!`)

        if (!queue.tracks[0]) return interaction.editReply({ embeds: [embedEmptyAfter] });

        const methods = ['', 'üîÅ', 'üîÇ'];
        if (interaction.options.get('—Å—Ç–æ—Ä—ñ–Ω–∫–∞') == null) var args = 1;
        else args = interaction.options.get('—Å—Ç–æ—Ä—ñ–Ω–∫–∞').value

        const songs = queue.tracks.length;
        const parsedSongs = parseInt(songs);
        const maxPage = Math.ceil(parsedSongs/5)
        const page = args;
        const firstTrackInPage = page * 5 - 5;
        const lastTrackInPage = page * 5;
        const embedMaxPage = new MessageEmbed()
        .setColor(`RED`)
        .setDescription(`–ù–µ –¥—ñ–π—Å–Ω–∏–π –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏! –í–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ **1** –¥–æ **${maxPage}**!`)

        if (maxPage < page || page <= 0) {
            return interaction.editReply({ embeds: [embedMaxPage] })
        }

        //–í–∏—Å—Ç–∞–≤–ª—è—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è
        function pluralizeUkr(number, one, two, five) {
            let n = Math.abs(number);
            n %= 100;
            if (n >= 5 && n <= 20) {
              return five;
            }
            n %= 10;
            if (n === 1) {
              return one;
            }
            if (n >= 2 && n <= 4) {
              return two;
            }
            return five;
          }

        const embedPaginated = new MessageEmbed();

        embedPaginated.setColor('DARK_VIVID_PINK');
        embedPaginated.setThumbnail(interaction.guild.iconURL({ size: 2048, dynamic: true }));
        embedPaginated.setAuthor(`–ß–µ—Ä–≥–∞ - ${interaction.guild.name} ${methods[queue.repeatMode]}`, client.user.displayAvatarURL({ size: 1024, dynamic: true }));
        const tracksPaginated = queue.tracks.map((track, i) => `${i + 1} - [${track.title}](${track.url}) | ${track.author} | ${track.requestedBy}`);
        const nextSongsPaginated = songs > lastTrackInPage ? `–Ü —â–µ **${songs - lastTrackInPage}** —ñ–Ω—à${pluralizeUkr(songs - lastTrackInPage, `–∞`, `—ñ`, `–∏—Ö`)} –ø—ñ—Å${pluralizeUkr(songs - lastTrackInPage, `–Ω—è`, `–Ω—ñ`, `–µ–Ω—å`)}\n` : `–í—Å—å–æ–≥–æ **${songs}** –ø—ñ—Å${pluralizeUkr(songs, `–Ω—è`, `–Ω—ñ`, `–µ–Ω—å`)}\n`;
        embedPaginated.setDescription(`${page === 1 ? `–ó–∞—Ä–∞–∑ –≥—Ä–∞—î [${queue.current.title}](${queue.current.url}) | ${queue.current.author}\n**–ù–∞—Å—Ç—É–ø–Ω—ñ:**\n\n` : ``}${tracksPaginated.slice(firstTrackInPage, lastTrackInPage).join('\n')}\n\n${nextSongsPaginated}\n–°—Ç–æ—Ä—ñ–Ω–∫–∞ **${page}/${maxPage}**`);
        embedPaginated.setTimestamp();
        embedPaginated.setFooter('–ù–∞–π–∫—Ä–∞—â–∏–π –º—É–∑–∏—á–Ω–∏–π –±–æ—Ç. –°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è –ù–µ—ñ–≥—Ä–∏', interaction.member.avatarURL({ dynamic: true }));

        interaction.editReply({ embeds: [embedPaginated] });
    },
};